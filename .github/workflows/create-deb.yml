name: Build and Release Debian Package

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger only on versioned tags (e.g., v1.2.3)
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install required dependencies for building the .deb package
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev fakeroot

      # Step 3: Extract the version from the DEBIAN/control file
      - name: Extract version from control file
        id: get_version
        run: |
          VERSION=$(grep '^Version:' DEBIAN/control | cut -d ' ' -f 2)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Extracted version: ${VERSION}"  # Display extracted version for debugging

      # Step 4: Verify extracted version is not empty
      - name: Verify extracted version
        run: |
          if [ -z "${VERSION}" ]; then
            echo "Error: VERSION is empty!"
            exit 1
          fi

      # Step 5: Build the .deb package
      - name: Build .deb package
        run: dpkg-deb --build . "portmap_${VERSION}.deb"

      # Step 6: Verify that the .deb file was created
      - name: Check if .deb file exists
        run: |
          if [ ! -f "portmap_${VERSION}.deb" ]; then
            echo "Error: Debian package not found!"
            ls -lah  # List files to identify the issue
            exit 1
          fi

      # Step 7: Generate a SHA256 checksum for the .deb file
      - name: Generate SHA256 checksum
        run: sha256sum "portmap_${VERSION}.deb" > "portmap_${VERSION}.sha256"

      # Step 8: List files for debugging
      - name: List files (debug)
        run: ls -l

      # Step 9: Create a GitHub release and upload the package
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')  # Execute only if a tag is pushed
        with:
          tag_name: ${{ github.ref_name }}  # Use GitHub tag (e.g., v1.2.3)
          name: "Release ${{ github.ref_name }}"  # Release name
          body: "Version ${{ github.ref_name }} of portmap."  # Release description
          draft: false  # The release is not a draft
          prerelease: false  # The release is not a pre-release
          files: |
            portmap_${{ env.VERSION }}.deb
            portmap_${{ env.VERSION }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Use the personal access token (PAT)