#!/bin/bash

DB_FILE="/var/lib/portmap.db"
START_PORT=3000
END_PORT=65535
LOG_FILE="/var/log/portmap.log"
BACKUP_DIR="/var/lib/portmap_backups"

# Stop the script on any error
set -e

# Ensure required paths exist
function ensure_path_exists {
    local path="$1"
    local type="$2" # 'file' or 'directory'

    if [ "$type" == "file" ]; then
        local dir
        dir=$(dirname "$path")
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
        fi
        if [ ! -f "$path" ]; then
            touch "$path"
        fi
    elif [ "$type" == "directory" ]; then
        if [ ! -d "$path" ]; then
            mkdir -p "$path"
        fi
    fi
}

# Function to log actions
function log_action {
    local message="$1"
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $message" >> "$LOG_FILE"
}

# Function to log errors
function error {
    echo "Error: $1" >&2
    log_action "ERROR: $1"
    exit 1
}

# List registered ports with improved formatting
function list_ports {
    if [ ! -s "$DB_FILE" ]; then
        echo "No ports registered in the database."
        exit 0
    fi

    # Print the table header with better alignment
    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"
    echo -e "|  Port   |   Type     |       Name        |      Description       |     Date Added      |"
    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"

    # Loop through the entries and format the output
    while IFS=, read -r port type name description date_added; do
        # Remove surrounding quotes from the description if they exist
        description=$(echo "$description" | sed 's/^"\(.*\)"$/\1/')

        # Format the output to align the columns properly
        printf "| %-7s | %-10s | %-17s | %-21s | %-19s |\n" "$port" "$type" "$name" "$description" "$date_added"
    done < "$DB_FILE"

    # Print the table footer
    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"
}





# Find the next free port in the range 3000-65535
function find_next_free_port {
    for port in $(seq "$START_PORT" "$END_PORT"); do
        if ! grep -q "^${port}," "$DB_FILE"; then
            echo "$port"
            return
        fi
    done
    error "No available ports in the range $START_PORT-$END_PORT."
}

# Search for ports by name or description
function search_ports {
    local keyword="$1"
    if grep -i "$keyword" "$DB_FILE"; then
        grep -i "$keyword" "$DB_FILE" | while IFS=, read -r port type name description date_added; do
            printf "Port: %s, Type: %s, Name: %s, Description: %s, Date Added: %s\n" "$port" "$type" "$name" "$description" "$date_added"
        done
    else
        highlight "No matches found for $keyword."
    fi
}

# Export database to JSON
function export_to_json {
    local output_file="$1"

    # Validate file path for invalid characters
    if [[ -z "$output_file" || "$output_file" == *[';|&']* ]]; then
        error "Invalid file path for export."
    fi

    ensure_path_exists "$output_file" file

    echo "[" > "$output_file"
    local first_entry=true
    while IFS=, read -r port type name description date_added; do
        if [ "$first_entry" = true ]; then
            first_entry=false
        else
            echo "," >> "$output_file"
        fi
        # If description is empty, use null instead of an empty string
        if [ -z "$description" ]; then
            description="null"
        fi
        echo "  {\"port\": \"$port\", \"type\": \"$type\", \"name\": \"$name\", \"description\": $description, \"date_added\": \"$date_added\"}" >> "$output_file"
    done < "$DB_FILE"
    echo "]" >> "$output_file"

    log_action "Exported database to JSON file $output_file"
    highlight "Database exported to $output_file"
}

# Function to clean the description by removing problematic characters
function clean_description {
    local description="$1"

    # Remove problematic characters: commas, quotes, newlines, tabs, etc.
    description=$(echo "$description" | sed 's/[",]//g' | tr -d '\n' | tr -d '\t' | tr -d '\r')

    echo "$description"
}

# Add a new port to the database
function add_port {
    local port="$1"
    local type="$2"
    local name="$3"
    local description="${4:-}"  # If no description is provided, set it as an empty string
    local date_added
    date_added=$(date +'%Y-%m-%d %H:%M:%S')

    # Check if the port already exists in the database
    if grep -q "^${port}," "$DB_FILE"; then
        echo "Port $port already exists in the database."
        echo "Do you want to use the next available port? (y/n)"
        read -r user_response
        if [[ "$user_response" =~ ^[yY]$ ]]; then
            # Find the next available port
            port=$(find_next_free_port)
            echo "Using port $port instead."
        else
            error "Port $port already exists. Operation cancelled."
        fi
    fi

    # Clean the description using the clean_description function
    description=$(clean_description "$description")

    # Add the new entry to the database with an optional empty description
    echo "$port,$type,$name,$description,$date_added" >> "$DB_FILE"
    log_action "Added port $port with type '$type', name '$name', description '$description', and date '$date_added'"

    # Highlight the success message in green
    highlight "Port $port has been successfully added."

    backup_db  # Backup after addition
}



# Modify an existing port entry
function modify_port {
    local port="$1"
    local type="$2"
    local name="$3"
    local description="${4:-}"  # If no description is provided, set it as an empty string

    # Clean the description using the clean_description function
    description=$(clean_description "$description")

    if ! grep -q "^${port}," "$DB_FILE"; then
        error "Port $port does not exist in the database."
    fi

    # Modify the entry using sed to replace the entire line corresponding to the port
    sed -i "s/^${port},.*/${port},${type},${name},${description},$(date +'%Y-%m-%d %H:%M:%S')/" "$DB_FILE"

    log_action "Modified port $port with type '$type', name '$name', description '$description'"
    highlight "Port $port has been successfully modified."
    backup_db  # Backup after modification
}

# Delete entry by port or name
function delete_entry {
    local identifier="$1"
    
    if [[ "$identifier" =~ ^[0-9]+$ ]]; then
        # Delete by port
        if grep -q "^${identifier}," "$DB_FILE"; then
            # Remove the entry with the specific port directly from the file
            sed -i "/^${identifier},/d" "$DB_FILE"
            log_action "Deleted entry with port $identifier"
            highlight "Entry with port $identifier has been successfully deleted."
            backup_db  # Backup after deletion
        else
            error "No entry with port '$identifier' found in the database."
        fi
    else
        # Delete by name
        if grep -q ",$identifier," "$DB_FILE"; then
            # Remove the entry with the specific name directly from the file
            sed -i "/,$identifier,/d" "$DB_FILE"
            log_action "Deleted entry with name $identifier"
            highlight "Entry with name $identifier has been successfully deleted."
            backup_db  # Backup after deletion
        else
            error "No entry with name '$identifier' found in the database."
        fi
    fi
}



# Backup the database with unique filenames
function backup_db {
    ensure_path_exists "$BACKUP_DIR" directory
    local timestamp
    timestamp=$(date +'%Y%m%d%H%M%S')
    cp "$DB_FILE" "$BACKUP_DIR/portmap_${timestamp}.db"
    log_action "Database backup created at $BACKUP_DIR/portmap_${timestamp}.db"
}

# Reset the database
function reset_db {
    echo "Are you sure you want to reset the database? This action cannot be undone. (y/n)"
    read -r confirmation
    if [[ "$confirmation" =~ ^[yY]$ ]]; then
        > "$DB_FILE"
        log_action "Database reset"
        highlight "Database has been reset."
    else
        echo "Operation cancelled."
    fi
}

# Display help message
function display_help {
    echo "Usage:"
    echo "  portmap               - List registered ports"
    echo "  portmap -l, --list    - List registered ports"
    echo "  portmap -n, --next    - Find the next available port"
    echo "  portmap -a, --add <port> <type> <name> [<description>] - Add a new port"
    echo "  portmap -m, --modify <port> <type> <name> <description> - Modify an existing port"
    echo "  portmap -d, --delete <identifier> - Delete entry by port or name"
    echo "  portmap -r, --remove <identifier> - Delete entry by port or name (same as -d)"
    echo "  portmap --reset       - Reset the database"
    echo "  portmap -h, --help    - Display this help message"
    echo "  portmap -b, --backup  - Backup the database"
    echo "  portmap -s, --search <keyword>  - Search ports by name or description"
    echo "  portmap -e, --export <file>     - Export database to JSON file"
}

# Highlight text for better visibility
function highlight {
    echo -e "\033[1;32m$1\033[0m"
}

# Main function
function main {
    ensure_path_exists "$DB_FILE" file
    ensure_path_exists "$LOG_FILE" file
    ensure_path_exists "$BACKUP_DIR" directory

    # Check if the number of arguments is correct
    if [ "$#" -eq 0 ] || [ "$1" == "-l" ] || [ "$1" == "--list" ]; then
        list_ports
    elif [ "$1" == "-n" ] || [ "$1" == "--next" ]; then
        find_next_free_port
    elif [ "$1" == "-a" ] || [ "$1" == "--add" ]; then
        if [ "$#" -ne 4 ] && [ "$#" -ne 5 ]; then
            error "Usage: portmap -a, --add <port> <type> <name> [<description>]"
        fi
        add_port "$2" "$3" "$4" "$5"
    elif [ "$1" == "-m" ] || [ "$1" == "--modify" ]; then
        if [ "$#" -ne 5 ]; then
            error "Usage: portmap -m, --modify <port> <type> <name> <description>"
        fi
        modify_port "$2" "$3" "$4" "$5"
    elif [ "$1" == "-d" ] || [ "$1" == "--delete" ] || [ "$1" == "-r" ] || [ "$1" == "--remove" ]; then
        if [ -z "$2" ]; then
            error "Please provide a port or name to delete."
        fi
        delete_entry "$2"
    elif [ "$1" == "--reset" ]; then
        reset_db
    elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        display_help
        exit 0
    elif [ "$1" == "-b" ] || [ "$1" == "--backup" ]; then
        backup_db
    elif [ "$1" == "-s" ] || [ "$1" == "--search" ]; then
        if [ -z "$2" ]; then
            error "Please provide a keyword to search for."
        fi
        search_ports "$2"
    elif [ "$1" == "-e" ] || [ "$1" == "--export" ]; then
        if [ -z "$2" ]; then
            error "Please provide a file path for export."
        fi
        export_to_json "$2"
    else
        display_help
        exit 1
    fi
}


main "$@"
