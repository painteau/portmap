#!/bin/bash

# Configuration file
CONFIG_FILE="/etc/portmap.conf"

# Function to create the default configuration file
function create_default_config {
    local config_file="$1"
    if [ ! -f "$config_file" ]; then
        echo "# Portmap configuration file" > "$config_file"
        echo "DB_FILE=\"/var/lib/portmap.db\"" >> "$config_file"
        echo "START_PORT=3000" >> "$config_file"
        echo "END_PORT=65535" >> "$config_file"
        echo "LOG_FILE=\"/var/log/portmap.log\"" >> "$config_file"
        echo "BACKUP_DIR=\"/var/lib/portmap_backups\"" >> "$config_file"
        echo "HISTORY_FILE=\"/var/log/portmap_history.log\"" >> "$config_file"
        log_action "INFO" "Created default configuration file at $config_file"
    fi
}

# Function to load the configuration
function load_config {
    local config_file="$1"
    create_default_config "$config_file"
    if [ -f "$config_file" ]; then
        source "$config_file"
    else
        error "Config file $config_file does not exist and could not be created."
    fi
}

# Default variables (will be overridden by the configuration file)
DB_FILE="/var/lib/portmap.db"
START_PORT=3000
END_PORT=65535
LOG_FILE="/var/log/portmap.log"
BACKUP_DIR="/var/lib/portmap_backups"
HISTORY_FILE="/var/log/portmap_history.log"
VERSION="1.1.1"

# Load the configuration
load_config "$CONFIG_FILE"

# Stop the script on any error
set -e

# Function to check dependencies
function check_dependencies {
    local dependencies=("jq" "ss" "docker")
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            error "$dep is not installed. Please install it to use this feature."
        fi
    done
}

# Function to ensure paths exist
function ensure_path_exists {
    local path="$1"
    local type="$2" # 'file' or 'directory'

    if [ "$type" == "file" ]; then
        local dir
        dir=$(dirname "$path")
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
        fi
        if [ ! -f "$path" ]; then
            touch "$path"
        fi
    elif [ "$type" == "directory" ]; then
        if [ ! -d "$path" ]; then
            mkdir -p "$path"
        fi
    fi
}

# Function to check file permissions
function check_file_permissions {
    local file="$1"
    if [ ! -w "$file" ]; then
        error "No write permissions for $file."
    fi
}

# Function to log actions
function log_action {
    local level="$1"
    local message="$2"
    echo "$(date +'%Y-%m-%d %H:%M:%S') - [$level] - $message" >> "$LOG_FILE"
}

# Function to log history
function log_history {
    local action="$1"
    local details="$2"
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $action - $details" >> "$HISTORY_FILE"
}

# Function to display errors and exit
function error {
    echo "Error: $1" >&2
    log_action "ERROR" "$1"
    exit 1
}

# Function to highlight a message
function highlight {
    echo -e "\033[1;32m$1\033[0m"
}

# Function to list ports
function list_ports {
    if [ ! -s "$DB_FILE" ]; then
        echo "No ports registered in the database."
        exit 0
    fi

    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"
    echo -e "|  Port   |  Protocol  |       Name        |      Description      |     Date Added      |"
    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"

    while IFS=, read -r port protocol name description date_added; do
        description=$(echo "$description" | sed 's/^"\(.*\)"$/\1/')
        wrapped_description=$(echo "$description" | fold -s -w 22)
        first_line=true

        while IFS= read -r desc_line; do
            if [ -z "$desc_line" ]; then
                desc_line=" "
            fi

            if [ "$first_line" = true ]; then
                printf "| %-7s | %-10s | %-17s | %-21s | %-19s |\n" "$port" "$protocol" "$name" "$desc_line" "$date_added"
                first_line=false
            else
                printf "| %-7s | %-10s | %-17s | %-21s | %-19s |\n" " " " " " " "$desc_line" " "
            fi
        done <<< "$wrapped_description"
    done < "$DB_FILE"

    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"
}

# Function to find the next available port
function find_next_free_port {
    for port in $(seq "$START_PORT" "$END_PORT"); do
        if ! grep -q "^${port}," "$DB_FILE"; then
            echo "$port"
            return
        fi
    done
    error "No available ports in the range $START_PORT-$END_PORT."
}

# Function to check if a port is used by the system
function is_port_used {
    local port="$1"
    local protocol="$2"  # "tcp" or "udp"

    # Check if the port is used with ss
    if ss -tuln | grep -q ":$port "; then
        return 0  # Port is used
    else
        return 1  # Port is free
    fi
}

# Function to add a port
function add_port {
    local port="$1"
    local protocol="$2"  # "TCP" or "UDP"
    local name="$3"
    local description="${4:-}"
    local date_added
    date_added=$(date +'%Y-%m-%d %H:%M:%S')

    # Normalize protocol to uppercase
    protocol=$(echo "$protocol" | tr '[:lower:]' '[:upper:]')

    # Validate protocol
    if [[ "$protocol" != "TCP" && "$protocol" != "UDP" ]]; then
        error "Invalid protocol. Use 'TCP' or 'UDP'."
    fi

    # Check if the port is already used by the system
    if is_port_used "$port" "$protocol"; then
        error "Port $port is already in use by the system."
    fi

    # Check if the port already exists in the database
    if grep -q "^${port}," "$DB_FILE"; then
        error "Port $port already exists in the database."
    fi

    # Add the port to the database
    echo "$port,$protocol,$name,$description,$date_added" >> "$DB_FILE"
    log_action "INFO" "Added port $port with protocol '$protocol', name '$name', description '$description', and date '$date_added'"
    log_history "ADD" "Port $port added with protocol '$protocol', name '$name', description '$description'"
    highlight "Port $port has been successfully added."

    backup_db
}

# Function to modify a port
function modify_port {
    local port="$1"
    local protocol="$2"  # "TCP" or "UDP"
    local name="$3"
    local description="${4:-}"

    # Normalize protocol to uppercase
    protocol=$(echo "$protocol" | tr '[:lower:]' '[:upper:]')

    # Validate protocol
    if [[ "$protocol" != "TCP" && "$protocol" != "UDP" ]]; then
        error "Invalid protocol. Use 'TCP' or 'UDP'."
    fi

    # Check if the port exists in the database
    if ! grep -q "^${port}," "$DB_FILE"; then
        error "Port $port does not exist in the database."
    fi

    # Modify the entry
    sed -i "s/^${port},.*/${port},${protocol},${name},${description},$(date +'%Y-%m-%d %H:%M:%S')/" "$DB_FILE"
    log_action "INFO" "Modified port $port with protocol '$protocol', name '$name', description '$description'"
    log_history "MODIFY" "Port $port modified with protocol '$protocol', name '$name', description '$description'"
    highlight "Port $port has been successfully modified."

    backup_db
}

# Function to delete a port
function delete_port {
    local identifier="$1"

    if [[ "$identifier" =~ ^[0-9]+$ ]]; then
        # Delete by port
        if grep -q "^${identifier}," "$DB_FILE"; then
            sed -i "/^${identifier},/d" "$DB_FILE"
            log_action "INFO" "Deleted port $identifier"
            log_history "DELETE" "Port $identifier deleted"
            highlight "Port $identifier has been successfully deleted."
        else
            error "Port $identifier does not exist in the database."
        fi
    else
        # Delete by name
        if grep -q ",${identifier}," "$DB_FILE"; then
            sed -i "/,${identifier},/d" "$DB_FILE"
            log_action "INFO" "Deleted entry with name $identifier"
            log_history "DELETE" "Entry with name $identifier deleted"
            highlight "Entry with name $identifier has been successfully deleted."
        else
            error "No entry with name $identifier found in the database."
        fi
    fi

    backup_db
}

# Function to reset the database
function reset_db {
    echo "Are you sure you want to reset the database? This action cannot be undone. (y/n)"
    read -r confirmation
    if [[ "$confirmation" =~ ^[yY]$ ]]; then
        > "$DB_FILE"
        log_action "INFO" "Database reset"
        log_history "RESET" "Database reset"
        highlight "Database has been reset."
    else
        echo "Operation cancelled."
    fi
}

# Function to export the database to JSON
function export_to_json {
    local output_file="$1"

    if [[ -z "$output_file" || "$output_file" == *[';|&']* ]]; then
        error "Invalid file path for export."
    fi

    ensure_path_exists "$output_file" file

    echo "[" > "$output_file"
    local first_entry=true
    while IFS=, read -r port protocol name description date_added; do
        if [ "$first_entry" = true ]; then
            first_entry=false
        else
            echo "," >> "$output_file"
        fi
        if [ -z "$description" ]; then
            description="null"
        fi
        echo "  {\"port\": \"$port\", \"protocol\": \"$protocol\", \"name\": \"$name\", \"description\": $description, \"date_added\": \"$date_added\"}" >> "$output_file"
    done < "$DB_FILE"
    echo "]" >> "$output_file"

    log_action "INFO" "Exported database to JSON file $output_file"
    highlight "Database exported to $output_file"
}

# Function to search ports
function search_ports {
    local keyword="$1"
    local count=0

    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"
    echo -e "|  Port   |  Protocol  |       Name        |      Description      |     Date Added      |"
    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"

    while IFS=, read -r port protocol name description date_added; do
        if echo "$name $description" | grep -iq "$keyword"; then
            description=$(echo "$description" | sed 's/^"\(.*\)"$/\1/')
            wrapped_description=$(echo "$description" | fold -s -w 22)
            first_line=true

            while IFS= read -r desc_line; do
                if [ -z "$desc_line" ]; then
                    desc_line=" "
                fi

                if [ "$first_line" = true ]; then
                    printf "| %-7s | %-10s | %-17s | %-21s | %-19s |\n" "$port" "$protocol" "$name" "$desc_line" "$date_added"
                    first_line=false
                else
                    printf "| %-7s | %-10s | %-17s | %-21s | %-19s |\n" " " " " " " "$desc_line" " "
                fi
            done <<< "$wrapped_description"
            count=$((count + 1))
        fi
    done < "$DB_FILE"

    echo -e "+---------+------------+-------------------+-----------------------+---------------------+"

    if [ "$count" -eq 0 ]; then
        echo "No matches found for '$keyword'."
    fi
}

# Function to sync Docker container ports
function sync_docker_ports {
    local container_name="$1"  # "all" or a specific container name
    log_action "INFO" "Syncing Docker container ports with portmap..."

    # Get Docker container names and exposed ports
    docker ps --format "{{.Names}} {{.Ports}}" | while read -r docker_container_name ports; do
        # Skip if a specific container is targeted and it doesn't match
        if [[ "$container_name" != "all" && "$docker_container_name" != "$container_name" ]]; then
            continue
        fi

        # Parse exposed ports (format: 0.0.0.0:PORT_EXTERNE->PORT_INTERNE/protocole)
        echo "$ports" | grep -oP '\d+->\d+/(tcp|udp)' | while IFS=-> read -r external_port internal_port_protocol; do
            external_port=$(echo "$external_port" | cut -d':' -f2)
            internal_port=$(echo "$internal_port_protocol" | cut -d'/' -f1)
            protocol=$(echo "$internal_port_protocol" | cut -d'/' -f2 | tr '[:lower:]' '[:upper:]')  # Convert to uppercase (TCP/UDP)

            # Check if the external port is already in the database
            if ! grep -q "^${external_port}," "$DB_FILE"; then
                # Add the port to the database
                add_port "$external_port" "$protocol" "$docker_container_name" "Docker container: $docker_container_name (internal port: $internal_port)"
                log_action "INFO" "Added Docker container port: $external_port (container: $docker_container_name, protocol: $protocol)"
            else
                log_action "INFO" "Port $external_port already exists in the database (container: $docker_container_name)."
            fi
        done
    done

    if [[ "$container_name" == "all" ]]; then
        highlight "All Docker container ports have been synced with portmap."
    else
        highlight "Docker container ports for '$container_name' have been synced with portmap."
    fi
}

# Function to backup the database
function backup_db {
    ensure_path_exists "$BACKUP_DIR" directory
    local timestamp
    timestamp=$(date +'%Y%m%d%H%M%S')
    cp "$DB_FILE" "$BACKUP_DIR/portmap_${timestamp}.db"
    log_action "INFO" "Database backup created at $BACKUP_DIR/portmap_${timestamp}.db"
}

# Function to restore the database
function restore_db {
    local backup_file="$1"
    if [ ! -f "$backup_file" ]; then
        error "Backup file $backup_file does not exist."
    fi
    cp "$backup_file" "$DB_FILE"
    log_action "INFO" "Database restored from $backup_file"
    highlight "Database has been restored from $backup_file."
}

# Function to start the REST API
function start_api {
    local port="${1:-8080}"
    log_action "INFO" "Starting API on port $port"

    while true; do
        nc -l -p "$port" -c "
            read -r request
            echo -e 'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"status\": \"ok\"}'
        "
    done
}

# Function to display the version
function display_version {
    echo "portmap version $VERSION"
}

# Function to display help
function display_help {
    echo "Usage:"
    echo "  portmap               - List registered ports"
    echo "  portmap -l, --list    - List registered ports"
    echo "  portmap -n, --next    - Find the next available port"
    echo "  portmap -a, --add <port> <protocol> <name> [<description>] - Add a new port (protocol: TCP or UDP, case-insensitive)"
    echo "  portmap -m, --modify <port> <protocol> <name> <description> - Modify an existing port"
    echo "  portmap -d, --delete <identifier> - Delete entry by port or name"
    echo "  portmap -r, --remove <identifier> - Delete entry by port or name (same as -d)"
    echo "  portmap --reset       - Reset the database"
    echo "  portmap -h, --help    - Display this help message"
    echo "  portmap -b, --backup  - Backup the database"
    echo "  portmap -s, --search <keyword>  - Search ports by name or description"
    echo "  portmap -e, --export <file>     - Export database to JSON file"
    echo "  portmap --docker all            - Sync all Docker container ports"
    echo "  portmap --docker <container>    - Sync ports for a specific Docker container"
    echo "  portmap -i, --import <file>     - Import ports from a CSV or JSON file"
    echo "  portmap --restore <backup-file> - Restore the database from a backup"
    echo "  portmap --version     - Display the version"
    echo "  portmap --api <port>  - Start the REST API"
}

# Main function
function main {
    local CONFIG_FILE="/etc/portmap.conf"
    load_config "$CONFIG_FILE"
    check_dependencies
    ensure_path_exists "$DB_FILE" file
    ensure_path_exists "$LOG_FILE" file
    ensure_path_exists "$BACKUP_DIR" directory

    if [ "$#" -eq 0 ] || [ "$1" == "-l" ] || [ "$1" == "--list" ]; then
        list_ports
    elif [ "$1" == "-n" ] || [ "$1" == "--next" ]; then
        find_next_free_port
    elif [ "$1" == "-a" ] || [ "$1" == "--add" ]; then
        if [ "$#" -ne 5 ] && [ "$#" -ne 6 ]; then
            error "Usage: portmap -a, --add <port> <protocol> <name> [<description>]"
        fi
        add_port "$2" "$3" "$4" "$5"
    elif [ "$1" == "-m" ] || [ "$1" == "--modify" ]; then
        if [ "$#" -ne 5 ]; then
            error "Usage: portmap -m, --modify <port> <protocol> <name> <description>"
        fi
        modify_port "$2" "$3" "$4" "$5"
    elif [ "$1" == "-d" ] || [ "$1" == "--delete" ] || [ "$1" == "-r" ] || [ "$1" == "--remove" ]; then
        if [ -z "$2" ]; then
            error "Please provide a port or name to delete."
        fi
        delete_port "$2"
    elif [ "$1" == "--reset" ]; then
        reset_db
    elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        display_help
        exit 0
    elif [ "$1" == "-b" ] || [ "$1" == "--backup" ]; then
        backup_db
    elif [ "$1" == "-s" ] || [ "$1" == "--search" ]; then
        if [ -z "$2" ]; then
            error "Please provide a keyword to search for."
        fi
        search_ports "$2"
    elif [ "$1" == "-e" ] || [ "$1" == "--export" ]; then
        if [ -z "$2" ]; then
            error "Please provide a file path for export."
        fi
        export_to_json "$2"
    elif [ "$1" == "--docker" ]; then
        if [ -z "$2" ]; then
            error "Usage: portmap --docker all | portmap --docker <container-name>"
        fi
        sync_docker_ports "$2"
    elif [ "$1" == "-i" ] || [ "$1" == "--import" ]; then
        if [ -z "$2" ]; then
            error "Usage: portmap -i, --import <file>"
        fi
        import_ports "$2"
    elif [ "$1" == "--restore" ]; then
        if [ -z "$2" ]; then
            error "Usage: portmap --restore <backup-file>"
        fi
        restore_db "$2"
    elif [ "$1" == "--version" ]; then
        display_version
    elif [ "$1" == "--api" ]; then
        start_api "$2"
    else
        display_help
        exit 1
    fi
}

# Start the script
main "$@"